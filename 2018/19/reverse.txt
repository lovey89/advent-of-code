R0 IP R2 R3 R4 R5

#ip 1
00: addi 1 16 1     # IP = IP + 16       #      goto L1 (setup)
01: seti 1 2  5     # R5 = 1             # L9:  registers[5] = 1
02: seti 1 2  2     # R2 = 1             # L7:  registers[2] = 1
03: mulr 5 2  3     # R3 = R5 * R2       # L5:  registers[3] = registers[5] * registers[2]
04: eqrr 3 4  3     # R3 = R3 == R4      #      if registers[3] == registers[4]
05: addr 3 1  1     # IP = R3 + IP       #          then goto L2
06: addi 1 1  1     # IP = IP + 1        #          else goto L3
07: addr 5 0  0     # R0 = R5 + R0       # L2:  registers[0] += registers[5]
08: addi 2 1  2     # R2 = R2 + 1        # L3:  registers[2] += 1
09: gtrr 2 4  3     # R3 = R2 > R4       #      if registers[2] > registers[4]
10: addr 1 3  1     # IP = IP + R3       #          then goto L4
11: seti 2 8  1     # IP = 2             #          else goto L5
12: addi 5 1  5     # R5 = R5 + 1        # L4:  registers[5] += 1
13: gtrr 5 4  3     # R3 = R5 > R4       #      if registers[5] > registers[4]
14: addr 3 1  1     # IP = R3 + IP       #          then goto L6
15: seti 1 1  1     # IP = 1             #          else goto L7
16: mulr 1 1  1     # IP = IP * IP       # L6:  return registers[0] # IP = 256 will point outside program

# Setup
17: addi 4 2  4     # R4 = R4 + 2        # L1:  registers[4] += 2
18: mulr 4 4  4     # R4 = R4 * R4       #      registers[4] *= registers[4]
19: mulr 1 4  4     # R4 = IP * R4       #      registers[4] *= 19              registers[1]
20: muli 4 11 4     # R4 = R4 * 11       #      registers[4] *= 11
21: addi 3 3  3     # R3 = R3 + 3        #      registers[3] += 3
22: mulr 3 1  3     # R3 = R3 * IP       #      registers[3] *= 22              registers[1]
23: addi 3 4  3     # R3 = R3 + 4        #      registers[3] += 4
24: addr 4 3  4     # R4 = R4 + R3       #      registers[4] += registers[3]
25: addr 1 0  1     # IP = IP + R0       #      if R0 == 1
                                         #        then goto L8
26: seti 0 0  1     # IP = 0             #        else goto L9
27: setr 1 5  3     # R3 = IP            # L8:  registers[3] = 27
28: mulr 3 1  3     # R3 = R3 * IP       #      registers[3] *= 28
29: addr 1 3  3     # R3 = IP + R3       #      registers[3] += 29
30: mulr 1 3  3     # R3 = IP * R3       #      registers[3] *= 30
31: muli 3 14 3     # R3 = R3 * 14       #      registers[3] *= 14
32: mulr 3 1  3     # R3 = R3 * IP       #      registers[3] *= 32
33: addr 4 3  4     # R4 = R4 + R3       #      registers[4] += registers[3]
34: seti 0 0  0     # R0 = 0             #      registers[0] = 0
35: seti 0 1  1     # IP = 0             #      goto L9


# Instruction 00 will make the program jump here
registers[4] = ((registers[4] + 2) ** 2) * 19 * 11  # Insts: 17 - 20
registers[3] = (registers[3] + 3) * 22 + 4          # Insts: 21 - 23
registers[4] += registers[3]                        # Inst:  24

if registers[0] == 1:                               # Inst:  25
  registers[3] = (27 * 28 + 29) * 30 * 14 * 32      # Insts: 27 - 32
  registers[4] += registers[3]                      # Inst:  33
  registers[0] = 0                                  # Inst:  34

# Instructions 26 and 35 will make the program jump here
registers[5] = 1                                    # Inst:  01
registers[2] = 1                                    # Inst:  02

while True: # This will represent label L5
  if registers[5] * registers[2] == registers[4]:   # Insts: 03 - 05
    registers[0] += registers[5]                    # Inst:  07

  registers[2] += 1                                 # Inst:  08

  if registers[2] <= registers[4]:                  # Inst:  09. Note that I changed the sign so that I wont have to use else clause
    continue                                        # Inst:  11

  registers[5] += 1                                 # Inst:  12

  if registers[5] <= registers[4]:                  # Inst:  13. Again I have changed the sign
    registers[2] = 1                                # Inst:  02. Can then reuse label L5
    continue                                        # Inst:  15 but changed to jump to L5 instead of L7

  print(registers[0])
  break                                             # Inst:  16
